worker_processes 1;
error_log stderr;
pid /run/rauc-nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # sendfile seems necessary on 9p to avoid problems with pread returning only
  # 4096 bytes (which confuses nginx)
  sendfile on;

  keepalive_timeout 60;

  # comment this to enable logging to /var/log/nginx/access.log
  access_log /dev/null;

  upstream backend {
    server unix:/tmp/backend.sock fail_timeout=0;
  }

  # HTTP
  server {
    listen 127.0.0.1:80;
    listen [::1]:80;
    server_name localhost;

    rewrite ^/redir/(.*)$ /$1 redirect;

    location / {
      root .;
      autoindex on;
    }
    location /basic/ {
      alias ./;
      autoindex on;

      auth_basic "rauc basic auth test";
      auth_basic_user_file nginx.htpasswd;
    }
    location /backend/ {
      rewrite ^/backend/(.*)$ /$1 break;

      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://backend;
    }
    location /code/204 {
      return 204;
    }
    location /code/304 {
      return 304;
    }
    location /error/400 {
      return 400;
    }
    location /error/404 {
      return 404;
    }
    location /error/500 {
      return 500;
    }
  }

  # HTTPS
  server {
    listen 127.0.0.1:443 ssl;
    listen [::1]:443 ssl;
    server_name localhost;

    ssl_certificate openssl-ca/web/server.chain.pem;
    ssl_certificate_key openssl-ca/web/private/server.pem;

    location / {
      proxy_pass http://127.0.0.1/;
    }
  }

  # HTTPS with HTTP/2
  server {
    listen 127.0.0.2:443 ssl http2;
    server_name localhost;

    ssl_certificate openssl-ca/web/server.chain.pem;
    ssl_certificate_key openssl-ca/web/private/server.pem;

    location / {
      proxy_pass http://127.0.0.1/;
    }
  }

  # HTTPS with client certificates checking
  server {
    listen 127.0.0.3:443 ssl;
    server_name localhost;

    ssl_certificate openssl-ca/web/server.chain.pem;
    ssl_certificate_key openssl-ca/web/private/server.pem;

    ssl_client_certificate openssl-ca/web-ca.pem;
    ssl_verify_client on;

    location / {
      proxy_pass http://127.0.0.1/;
    }
  }
}
